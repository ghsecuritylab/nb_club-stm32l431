<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32L431RxTx\STM32L431RxTx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32L431RxTx\STM32L431RxTx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Fri Jan 05 22:51:15 2018
<BR><P>
<H3>Maximum Stack Usage =       1096 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
u8g_com_hw_i2c_fn &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[57]">BC95C_Custom_CCLK_Func</a> from bc95_club.o(i.BC95C_Custom_CCLK_Func) referenced from bc95_club.o(.constdata)
 <LI><a href="#[59]">BC95C_Custom_CEREG_Func</a> from bc95_club.o(i.BC95C_Custom_CEREG_Func) referenced from bc95_club.o(.constdata)
 <LI><a href="#[5b]">BC95C_Custom_CFUN_Func</a> from bc95_club.o(i.BC95C_Custom_CFUN_Func) referenced from bc95_club.o(.constdata)
 <LI><a href="#[5a]">BC95C_Custom_CGATT_Func</a> from bc95_club.o(i.BC95C_Custom_CGATT_Func) referenced from bc95_club.o(.constdata)
 <LI><a href="#[58]">BC95C_Custom_CSCON_Func</a> from bc95_club.o(i.BC95C_Custom_CSCON_Func) referenced from bc95_club.o(.constdata)
 <LI><a href="#[54]">BC95C_Custom_CSQ_Func</a> from bc95_club.o(i.BC95C_Custom_CSQ_Func) referenced from bc95_club.o(.constdata)
 <LI><a href="#[56]">BC95C_Custom_IMEI_Func</a> from bc95_club.o(i.BC95C_Custom_IMEI_Func) referenced from bc95_club.o(.constdata)
 <LI><a href="#[55]">BC95C_Custom_IP_Func</a> from bc95_club.o(i.BC95C_Custom_IP_Func) referenced from bc95_club.o(.constdata)
 <LI><a href="#[5c]">BC95C_Custom_NSONMI_Func</a> from bc95_club.o(i.BC95C_Custom_NSONMI_Func) referenced from bc95_club.o(.constdata)
 <LI><a href="#[5d]">BC95C_Custom_NSORF_Func</a> from bc95_club.o(i.BC95C_Custom_NSORF_Func) referenced from bc95_club.o(.constdata)
 <LI><a href="#[53]">BC95C_Query_Point_Func</a> from bc95_club.o(i.BC95C_Query_Point_Func) referenced 8 times from bc95_club.o(.constdata)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32l4xx_it.o(i.BusFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3b]">COMP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[49]">CRS_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[36]">DMA2_Channel1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[37]">DMA2_Channel2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[38]">DMA2_Channel3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[39]">DMA2_Channel4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3a]">DMA2_Channel5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel6_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32l4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32l4xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[30]">EXTI15_10_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32l4xx_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from stm32l4xx_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from stm32l4xx_it.o(i.EXTI3_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[48]">FPU_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l4xx_it.o(i.HardFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[28]">I2C1_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[27]">I2C1_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2a]">I2C2_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[29]">I2C2_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[43]">I2C3_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[42]">I2C3_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3c]">LPTIM1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3d]">LPTIM2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[40]">LPUART1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32l4xx_it.o(i.MemManage_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l4xx_it.o(i.NMI_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[b]">PVD_PVM_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32l4xx_it.o(i.PendSV_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[41]">QUADSPI_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[47]">RNG_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[31]">RTC_Alarm_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[44]">SAI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[32]">SDMMC1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2b]">SPI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2c]">SPI2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[33]">SPI3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32l4xx_it.o(i.SVC_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[45]">SWPMI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32l4xx_it.o(i.SysTick_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4b]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l431xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[34]">TIM6_DAC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[35]">TIM7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[46]">TSC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4d]">UART_DMAAbortOnError</a> from stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[2d]">USART1_IRQHandler</a> from stm32l4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2e]">USART2_IRQHandler</a> from stm32l4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2f]">USART3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32l4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l431xx.o(.text)
 <LI><a href="#[4e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[4a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4f]">u8g_com_hw_i2c_fn</a> from u8g_arm.o(i.u8g_com_hw_i2c_fn) referenced from main.o(i.main)
 <LI><a href="#[5f]">u8g_com_null_fn</a> from u8g_com_null.o(i.u8g_com_null_fn) referenced 6 times from u8g_dev_ssd1306_128x32.o(.data)
 <LI><a href="#[60]">u8g_dev_ssd1306_128x32_2x_fn</a> from u8g_dev_ssd1306_128x32.o(i.u8g_dev_ssd1306_128x32_2x_fn) referenced 3 times from u8g_dev_ssd1306_128x32.o(.data)
 <LI><a href="#[5e]">u8g_dev_ssd1306_128x32_fn</a> from u8g_dev_ssd1306_128x32.o(i.u8g_dev_ssd1306_128x32_fn) referenced 3 times from u8g_dev_ssd1306_128x32.o(.data)
 <LI><a href="#[50]">u8g_font_calc_vref_font</a> from u8g_font.o(i.u8g_font_calc_vref_font) referenced from u8g_font.o(i.u8g_SetFontPosBaseline)
 <LI><a href="#[51]">u8g_font_calc_vref_top</a> from u8g_font.o(i.u8g_font_calc_vref_top) referenced from u8g_font.o(i.u8g_SetFontPosTop)
 <LI><a href="#[52]">u8g_state_dummy_cb</a> from u8g_state.o(i.u8g_state_dummy_cb) referenced from u8g_ll_api.o(i.u8g_init_data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(.text)
</UL>
<P><STRONG><a name="[118]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[61]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[74]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[119]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[11a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[11b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[11c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[11d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d3]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc95_hexstr_to_byte
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95_Send_Data
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[77]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95_Query_Param_OK
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Query_Point_Func
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_NSONMI_Func
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_CSQ_Func
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_CSCON_Func
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_CGATT_Func
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_CFUN_Func
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_CEREG_Func
</UL>

<P><STRONG><a name="[76]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95_Query_Param_OK
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_NSORF_Func
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_NSONMI_Func
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_CSQ_Func
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_CSCON_Func
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_CGATT_Func
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_CFUN_Func
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_CEREG_Func
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_CCLK_Func
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT2x_CalcTemperatureC
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT2x_CalcRH
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT2x_CalcTemperatureC
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT2x_CalcRH
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT2x_CalcTemperatureC
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT2x_CalcRH
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT2x_CalcTemperatureC
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT2x_CalcRH
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[123]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[124]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[125]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[127]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[6b]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[62]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[128]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>HAL_DMA_Abort</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort
</UL>

<P><STRONG><a name="[9e]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Delay
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT2x_SoftReset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WriteByte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StopCondition
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StartCondition
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_ReadByte
</UL>

<P><STRONG><a name="[7f]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>HAL_GPIO_Init</STRONG> (Thumb, 432 bytes, Stack size 20 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[ad]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WriteByte
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_ReadByte
</UL>

<P><STRONG><a name="[ac]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WriteByte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StopCondition
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StartCondition
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_ReadByte
</UL>

<P><STRONG><a name="[7e]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[b4]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>

<P><STRONG><a name="[b5]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>

<P><STRONG><a name="[80]"></a>HAL_I2C_Init</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>

<P><STRONG><a name="[82]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_com_hw_i2c_fn
</UL>

<P><STRONG><a name="[81]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[c6]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[88]"></a>HAL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[8b]"></a>HAL_MspInit</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a7]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[8d]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[89]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[bd]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[90]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 896 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[92]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 458 bytes, Stack size 16 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[95]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[94]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[96]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[93]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 252 bytes, Stack size 20 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[97]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1672 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c9]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[9a]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[99]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a0]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>HAL_UART_Abort</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95_Send_Data
</UL>

<P><STRONG><a name="[9f]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[9c]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>HAL_UART_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[a3]"></a>HAL_UART_MspInit</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[78]"></a>HAL_UART_Receive</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95_Send_Data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_NSONMI_Func
</UL>

<P><STRONG><a name="[7b]"></a>HAL_UART_Transmit</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95_Send_Data
</UL>

<P><STRONG><a name="[ca]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>I2c_ReadByte</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, sht20drv.o(i.I2c_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2c_ReadByte &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20Process
</UL>

<P><STRONG><a name="[ae]"></a>I2c_StartCondition</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sht20drv.o(i.I2c_StartCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2c_StartCondition &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20Process
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSHT20Itme
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT2x_SoftReset
</UL>

<P><STRONG><a name="[af]"></a>I2c_StopCondition</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sht20drv.o(i.I2c_StopCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2c_StopCondition &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20Process
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT2x_SoftReset
</UL>

<P><STRONG><a name="[b0]"></a>I2c_WriteByte</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, sht20drv.o(i.I2c_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2c_WriteByte &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20Process
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSHT20Itme
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT2x_SoftReset
</UL>

<P><STRONG><a name="[b1]"></a>MX_GPIO_Init</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_GPIO_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>MX_I2C2_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, i2c.o(i.MX_I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MX_I2C2_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>OLED_Show_Page1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oled.o(i.OLED_Show_Page1))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = OLED_Show_Page1 &rArr; u8g_DrawStr &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStr
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[bb]"></a>OLED_Show_a_Page</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, oled.o(i.OLED_Show_a_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = OLED_Show_a_Page &rArr; u8g_DrawStr &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFontPosTop
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>SHT20Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sht20drv.o(i.SHT20Init))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20Process
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>SHT20Process</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, sht20drv.o(i.SHT20Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SHT20Process &rArr; SHT2x_CalcTemperatureC &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSHT20Itme
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT2x_SoftReset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT2x_CheckCrc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT2x_CalcTemperatureC
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT2x_CalcRH
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WriteByte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StopCondition
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StartCondition
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>SHT2x_CalcRH</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, sht20drv.o(i.SHT2x_CalcRH))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SHT2x_CalcRH &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20Process
</UL>

<P><STRONG><a name="[c3]"></a>SHT2x_CalcTemperatureC</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, sht20drv.o(i.SHT2x_CalcTemperatureC))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SHT2x_CalcTemperatureC &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20Process
</UL>

<P><STRONG><a name="[c1]"></a>SHT2x_CheckCrc</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sht20drv.o(i.SHT2x_CheckCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHT2x_CheckCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20Process
</UL>

<P><STRONG><a name="[c0]"></a>SHT2x_SoftReset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sht20drv.o(i.SHT2x_SoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SHT2x_SoftReset &rArr; I2c_WriteByte &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WriteByte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StopCondition
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StartCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20Process
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>SetSHT20Itme</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sht20drv.o(i.SetSHT20Itme))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetSHT20Itme &rArr; I2c_WriteByte &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WriteByte
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StartCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20Process
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>SystemClock_Config</STRONG> (Thumb, 178 bytes, Stack size 192 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[a6]"></a>UART_CheckIdleState</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[a4]"></a>UART_SetConfig</STRONG> (Thumb, 1000 bytes, Stack size 40 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[a8]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[2d]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>_Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[cb]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[129]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[d8]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[12b]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[12c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[12d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[12e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[d2]"></a>bc95_hexstr_to_byte</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, bc95.o(i.bc95_hexstr_to_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bc95_hexstr_to_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>draw</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = draw &rArr; OLED_Show_a_Page &rArr; u8g_DrawStr &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_a_Page
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Page1
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>main</STRONG> (Thumb, 520 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_NextPage
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitComFn
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FirstPage
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc95_hexstr_to_byte
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20Process
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[101]"></a>u8g_10MicroDelay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, u8g_arm.o(i.u8g_10MicroDelay))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_com_hw_i2c_fn
</UL>

<P><STRONG><a name="[d9]"></a>u8g_Begin</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, u8g_ll_api.o(i.u8g_Begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = u8g_Begin &rArr; u8g_UpdateDimension &rArr; u8g_GetWidthLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitLL
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitComFn
</UL>

<P><STRONG><a name="[de]"></a>u8g_Delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, u8g_arm.o(i.u8g_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
</UL>

<P><STRONG><a name="[df]"></a>u8g_Draw8Pixel</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, u8g_ll_api.o(i.u8g_Draw8Pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8PixelLL
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
</UL>

<P><STRONG><a name="[e0]"></a>u8g_Draw8PixelLL</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, u8g_ll_api.o(i.u8g_Draw8PixelLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
</UL>

<P><STRONG><a name="[ba]"></a>u8g_DrawStr</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, u8g_font.o(i.u8g_DrawStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = u8g_DrawStr &rArr; u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_a_Page
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Page1
</UL>

<P><STRONG><a name="[d6]"></a>u8g_FirstPage</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_ll_api.o(i.u8g_FirstPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u8g_FirstPage &rArr; u8g_FirstPageLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FirstPageLL
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>u8g_FirstPageLL</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_FirstPageLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_FirstPageLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FirstPage
</UL>

<P><STRONG><a name="[e4]"></a>u8g_GetGlyph</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, u8g_font.o(i.u8g_GetGlyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = u8g_GetGlyph &rArr; u8g_CopyGlyphDataToCache &rArr; u8g_font_GetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontStartEncoding
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontEndEncoding
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetEncoding97Pos
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetEncoding65Pos
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFormat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontGlyphStructureSize
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FillEmptyGlyphCache
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_CopyGlyphDataToCache
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
</UL>

<P><STRONG><a name="[eb]"></a>u8g_GetHeightLL</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_GetHeightLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_GetHeightLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
</UL>

<P><STRONG><a name="[ec]"></a>u8g_GetModeLL</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_GetModeLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_GetModeLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
</UL>

<P><STRONG><a name="[ed]"></a>u8g_GetWidthLL</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_GetWidthLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_GetWidthLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
</UL>

<P><STRONG><a name="[10e]"></a>u8g_InitCom</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, u8g_com_api.o(i.u8g_InitCom))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_InitCom
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x32_fn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x32_2x_fn
</UL>

<P><STRONG><a name="[d5]"></a>u8g_InitComFn</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_InitComFn))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = u8g_InitComFn &rArr; u8g_Begin &rArr; u8g_UpdateDimension &rArr; u8g_GetWidthLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_init_data
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>u8g_InitLL</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_InitLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_InitLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
</UL>

<P><STRONG><a name="[ef]"></a>u8g_IsBBXIntersection</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, u8g_clip.o(i.u8g_IsBBXIntersection))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_IsBBXIntersection &rArr; u8g_is_intersection_decision_tree
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_is_intersection_decision_tree
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
</UL>

<P><STRONG><a name="[100]"></a>u8g_MicroDelay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, u8g_arm.o(i.u8g_MicroDelay))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_com_hw_i2c_fn
</UL>

<P><STRONG><a name="[d7]"></a>u8g_NextPage</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, u8g_ll_api.o(i.u8g_NextPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u8g_NextPage &rArr; u8g_NextPageLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_NextPageLL
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>u8g_NextPageLL</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, u8g_ll_api.o(i.u8g_NextPageLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_NextPageLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_NextPage
</UL>

<P><STRONG><a name="[fc]"></a>u8g_SetAddress</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, u8g_com_api.o(i.u8g_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x32_fn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x32_2x_fn
</UL>

<P><STRONG><a name="[fd]"></a>u8g_SetChipSelect</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, u8g_com_api.o(i.u8g_SetChipSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_SetChipSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x32_fn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x32_2x_fn
</UL>

<P><STRONG><a name="[114]"></a>u8g_SetColorIndex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, u8g_ll_api.o(i.u8g_SetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_init_data
</UL>

<P><STRONG><a name="[b9]"></a>u8g_SetFont</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, u8g_font.o(i.u8g_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_SetFont &rArr; u8g_UpdateRefHeight &rArr; u8g_font_GetLowerGDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFontPosBaseline
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_a_Page
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Page1
</UL>

<P><STRONG><a name="[f3]"></a>u8g_SetFontPosBaseline</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, u8g_font.o(i.u8g_SetFontPosBaseline))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_init_data
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
</UL>

<P><STRONG><a name="[bc]"></a>u8g_SetFontPosTop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, u8g_font.o(i.u8g_SetFontPosTop))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_a_Page
</UL>

<P><STRONG><a name="[ff]"></a>u8g_SetResetHigh</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g_com_api.o(i.u8g_SetResetHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g_SetResetHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
</UL>

<P><STRONG><a name="[fe]"></a>u8g_SetResetLow</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g_com_api.o(i.u8g_SetResetLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g_SetResetLow
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
</UL>

<P><STRONG><a name="[db]"></a>u8g_UpdateDimension</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, u8g_ll_api.o(i.u8g_UpdateDimension))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u8g_UpdateDimension &rArr; u8g_GetWidthLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_call_dev_fn
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetWidthLL
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetModeLL
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetHeightLL
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Begin
</UL>

<P><STRONG><a name="[f2]"></a>u8g_UpdateRefHeight</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, u8g_font.o(i.u8g_UpdateRefHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_UpdateRefHeight &rArr; u8g_font_GetLowerGDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetLowerGDescent
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontXDescent
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontXAscent
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontDescent
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontAscent
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetCapitalAHeight
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFont
</UL>

<P><STRONG><a name="[fb]"></a>u8g_WriteByte</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, u8g_com_api.o(i.u8g_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x32_fn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x32_2x_fn
</UL>

<P><STRONG><a name="[fa]"></a>u8g_WriteEscSeqP</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, u8g_com_api.o(i.u8g_WriteEscSeqP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u8g_WriteEscSeqP &rArr; u8g_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteByte
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetResetLow
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetResetHigh
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetChipSelect
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetAddress
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x32_fn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x32_2x_fn
</UL>

<P><STRONG><a name="[10f]"></a>u8g_WriteSequence</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, u8g_com_api.o(i.u8g_WriteSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_WriteSequence
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_WriteBuffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x32_2x_fn
</UL>

<P><STRONG><a name="[e1]"></a>u8g_call_dev_fn</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, u8g_ll_api.o(i.u8g_call_dev_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_call_dev_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateDimension
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_NextPageLL
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitLL
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetWidthLL
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetModeLL
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetHeightLL
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_FirstPageLL
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8PixelLL
</UL>

<P><STRONG><a name="[4f]"></a>u8g_com_hw_i2c_fn</STRONG> (Thumb, 156 bytes, Stack size 1032 bytes, u8g_arm.o(i.u8g_com_hw_i2c_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = u8g_com_hw_i2c_fn &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_MicroDelay
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_10MicroDelay
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[5f]"></a>u8g_com_null_fn</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, u8g_com_null.o(i.u8g_com_null_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_com_null_fn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g_dev_ssd1306_128x32.o(.data)
</UL>
<P><STRONG><a name="[102]"></a>u8g_dev_pb16v1_base_fn</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, u8g_pb16v1.o(i.u8g_dev_pb16v1_base_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = u8g_dev_pb16v1_base_fn &rArr; u8g_pb16v1_Set8PixelOpt2 &rArr; u8g_pb16v1_SetPixel &rArr; u8g_pb16v1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_Is8PixelVisible
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_GetPageBox
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_page_Next
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_page_First
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16v1_SetPixel
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16v1_Set8PixelOpt2
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16v1_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x32_2x_fn
</UL>

<P><STRONG><a name="[10a]"></a>u8g_dev_pb8v1_base_fn</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, u8g_pb8v1.o(i.u8g_dev_pb8v1_base_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = u8g_dev_pb8v1_base_fn &rArr; u8g_pb8v1_Set8PixelOpt2 &rArr; u8g_pb8v1_SetPixel &rArr; u8g_pb8v1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_Is8PixelVisible
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_GetPageBox
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_Clear
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_page_Next
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_page_First
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb8v1_SetPixel
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb8v1_Set8PixelOpt2
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x32_fn
</UL>

<P><STRONG><a name="[60]"></a>u8g_dev_ssd1306_128x32_2x_fn</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, u8g_dev_ssd1306_128x32.o(i.u8g_dev_ssd1306_128x32_2x_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = u8g_dev_ssd1306_128x32_2x_fn &rArr; u8g_dev_pb16v1_base_fn &rArr; u8g_pb16v1_Set8PixelOpt2 &rArr; u8g_pb16v1_SetPixel &rArr; u8g_pb16v1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteSequence
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteByte
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetChipSelect
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetAddress
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitCom
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16v1_base_fn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g_dev_ssd1306_128x32.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>u8g_dev_ssd1306_128x32_fn</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, u8g_dev_ssd1306_128x32.o(i.u8g_dev_ssd1306_128x32_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = u8g_dev_ssd1306_128x32_fn &rArr; u8g_dev_pb8v1_base_fn &rArr; u8g_pb8v1_Set8PixelOpt2 &rArr; u8g_pb8v1_SetPixel &rArr; u8g_pb8v1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteEscSeqP
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteByte
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetChipSelect
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetAddress
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitCom
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb8v1_base_fn
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_WriteBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g_dev_ssd1306_128x32.o(.data)
</UL>
<P><STRONG><a name="[e2]"></a>u8g_draw_glyph</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, u8g_font.o(i.u8g_draw_glyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = u8g_draw_glyph &rArr; u8g_Draw8Pixel &rArr; u8g_Draw8PixelLL &rArr; u8g_call_dev_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_Draw8Pixel
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetGlyphDataStart
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_DrawStr
</UL>

<P><STRONG><a name="[f4]"></a>u8g_font_GetCapitalAHeight</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetCapitalAHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetCapitalAHeight
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[e9]"></a>u8g_font_GetEncoding65Pos</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetEncoding65Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetEncoding65Pos
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_word
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[e8]"></a>u8g_font_GetEncoding97Pos</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetEncoding97Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetEncoding97Pos
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_word
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[f8]"></a>u8g_font_GetFontAscent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetFontAscent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontAscent
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[f9]"></a>u8g_font_GetFontDescent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetFontDescent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[e7]"></a>u8g_font_GetFontEndEncoding</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetFontEndEncoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontEndEncoding
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[e6]"></a>u8g_font_GetFontStartEncoding</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetFontStartEncoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontStartEncoding
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[f6]"></a>u8g_font_GetFontXAscent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetFontXAscent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontXAscent
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[f7]"></a>u8g_font_GetFontXDescent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetFontXDescent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFontXDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[f5]"></a>u8g_font_GetLowerGDescent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetLowerGDescent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetLowerGDescent
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_UpdateRefHeight
</UL>

<P><STRONG><a name="[50]"></a>u8g_font_calc_vref_font</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, u8g_font.o(i.u8g_font_calc_vref_font))
<BR>[Address Reference Count : 1]<UL><LI> u8g_font.o(i.u8g_SetFontPosBaseline)
</UL>
<P><STRONG><a name="[51]"></a>u8g_font_calc_vref_top</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, u8g_font.o(i.u8g_font_calc_vref_top))
<BR>[Address Reference Count : 1]<UL><LI> u8g_font.o(i.u8g_SetFontPosTop)
</UL>
<P><STRONG><a name="[107]"></a>u8g_page_First</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, u8g_page.o(i.u8g_page_First))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16v1_base_fn
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb8v1_base_fn
</UL>

<P><STRONG><a name="[108]"></a>u8g_page_Next</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, u8g_page.o(i.u8g_page_Next))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16v1_base_fn
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb8v1_base_fn
</UL>

<P><STRONG><a name="[106]"></a>u8g_pb16v1_Clear</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, u8g_pb16v1.o(i.u8g_pb16v1_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16v1_base_fn
</UL>

<P><STRONG><a name="[104]"></a>u8g_pb16v1_Set8PixelOpt2</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, u8g_pb16v1.o(i.u8g_pb16v1_Set8PixelOpt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = u8g_pb16v1_Set8PixelOpt2 &rArr; u8g_pb16v1_SetPixel &rArr; u8g_pb16v1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16v1_SetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16v1_base_fn
</UL>

<P><STRONG><a name="[105]"></a>u8g_pb16v1_SetPixel</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, u8g_pb16v1.o(i.u8g_pb16v1_SetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = u8g_pb16v1_SetPixel &rArr; u8g_pb16v1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16v1_set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16v1_Set8PixelOpt2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16v1_base_fn
</UL>

<P><STRONG><a name="[115]"></a>u8g_pb16v1_set_pixel</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, u8g_pb16v1.o(i.u8g_pb16v1_set_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g_pb16v1_set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb16v1_SetPixel
</UL>

<P><STRONG><a name="[10b]"></a>u8g_pb8v1_Set8PixelOpt2</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, u8g_pb8v1.o(i.u8g_pb8v1_Set8PixelOpt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = u8g_pb8v1_Set8PixelOpt2 &rArr; u8g_pb8v1_SetPixel &rArr; u8g_pb8v1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb8v1_SetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb8v1_base_fn
</UL>

<P><STRONG><a name="[10c]"></a>u8g_pb8v1_SetPixel</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, u8g_pb8v1.o(i.u8g_pb8v1_SetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = u8g_pb8v1_SetPixel &rArr; u8g_pb8v1_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb8v1_set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb8v1_Set8PixelOpt2
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb8v1_base_fn
</UL>

<P><STRONG><a name="[116]"></a>u8g_pb8v1_set_pixel</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, u8g_pb8v1.o(i.u8g_pb8v1_set_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g_pb8v1_set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb8v1_SetPixel
</UL>

<P><STRONG><a name="[10d]"></a>u8g_pb_Clear</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, u8g_pb.o(i.u8g_pb_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb8v1_base_fn
</UL>

<P><STRONG><a name="[109]"></a>u8g_pb_GetPageBox</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, u8g_pb.o(i.u8g_pb_GetPageBox))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16v1_base_fn
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb8v1_base_fn
</UL>

<P><STRONG><a name="[103]"></a>u8g_pb_Is8PixelVisible</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, u8g_pb.o(i.u8g_pb_Is8PixelVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_pb_Is8PixelVisible &rArr; u8g_pb_IsYIntersection
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_IsYIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb16v1_base_fn
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_pb8v1_base_fn
</UL>

<P><STRONG><a name="[117]"></a>u8g_pb_IsYIntersection</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, u8g_pb.o(i.u8g_pb_IsYIntersection))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = u8g_pb_IsYIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_pb_Is8PixelVisible
</UL>

<P><STRONG><a name="[110]"></a>u8g_pb_WriteBuffer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, u8g_pb.o(i.u8g_pb_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g_pb_WriteBuffer &rArr; u8g_WriteSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_WriteSequence
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_dev_ssd1306_128x32_fn
</UL>

<P><STRONG><a name="[52]"></a>u8g_state_dummy_cb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, u8g_state.o(i.u8g_state_dummy_cb))
<BR>[Address Reference Count : 1]<UL><LI> u8g_ll_api.o(i.u8g_init_data)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[91]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[98]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[4d]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[9d]"></a>UART_EndRxTransfer</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[8f]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[aa]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[a9]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[84]"></a>I2C_TransferConfig</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, stm32l4xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[83]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[86]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[85]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[f0]"></a>u8g_is_intersection_decision_tree</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, u8g_clip.o(i.u8g_is_intersection_decision_tree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_is_intersection_decision_tree
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_IsBBXIntersection
</UL>

<P><STRONG><a name="[ee]"></a>u8g_init_data</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, u8g_ll_api.o(i.u8g_init_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_init_data
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetFontPosBaseline
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_SetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_InitComFn
</UL>

<P><STRONG><a name="[dc]"></a>u8g_CopyGlyphDataToCache</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, u8g_font.o(i.u8g_CopyGlyphDataToCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g_CopyGlyphDataToCache &rArr; u8g_font_GetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[ea]"></a>u8g_FillEmptyGlyphCache</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, u8g_font.o(i.u8g_FillEmptyGlyphCache))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
</UL>

<P><STRONG><a name="[e5]"></a>u8g_font_GetFontGlyphStructureSize</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetFontGlyphStructureSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g_font_GetFontGlyphStructureSize &rArr; u8g_font_GetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetGlyphDataStart
</UL>

<P><STRONG><a name="[dd]"></a>u8g_font_GetFormat</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, u8g_font.o(i.u8g_font_GetFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g_font_GetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_GetGlyph
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontGlyphStructureSize
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_CopyGlyphDataToCache
</UL>

<P><STRONG><a name="[111]"></a>u8g_font_GetGlyphDataStart</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, u8g_font.o(i.u8g_font_GetGlyphDataStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = u8g_font_GetGlyphDataStart &rArr; u8g_font_GetFontGlyphStructureSize &rArr; u8g_font_GetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontGlyphStructureSize
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_draw_glyph
</UL>

<P><STRONG><a name="[112]"></a>u8g_font_get_byte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, u8g_font.o(i.u8g_font_get_byte))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetLowerGDescent
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontXDescent
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontXAscent
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontStartEncoding
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontEndEncoding
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontDescent
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFontAscent
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetCapitalAHeight
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetFormat
</UL>

<P><STRONG><a name="[113]"></a>u8g_font_get_word</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, u8g_font.o(i.u8g_font_get_word))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetEncoding97Pos
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g_font_GetEncoding65Pos
</UL>

<P><STRONG><a name="[57]"></a>BC95C_Custom_CCLK_Func</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, bc95_club.o(i.BC95C_Custom_CCLK_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BC95C_Custom_CCLK_Func &rArr; BC95_Query_Param_OK &rArr; BC95_Send_Data &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95_Query_Param_OK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95_club.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>BC95C_Custom_CEREG_Func</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, bc95_club.o(i.BC95C_Custom_CEREG_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BC95C_Custom_CEREG_Func &rArr; BC95_Query_Param_OK &rArr; BC95_Send_Data &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95_Query_Param_OK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95_club.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>BC95C_Custom_CFUN_Func</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, bc95_club.o(i.BC95C_Custom_CFUN_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BC95C_Custom_CFUN_Func &rArr; BC95_Query_Param_OK &rArr; BC95_Send_Data &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95_Query_Param_OK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95_club.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>BC95C_Custom_CGATT_Func</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, bc95_club.o(i.BC95C_Custom_CGATT_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BC95C_Custom_CGATT_Func &rArr; BC95_Query_Param_OK &rArr; BC95_Send_Data &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95_Query_Param_OK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95_club.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>BC95C_Custom_CSCON_Func</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, bc95_club.o(i.BC95C_Custom_CSCON_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BC95C_Custom_CSCON_Func &rArr; BC95_Query_Param_OK &rArr; BC95_Send_Data &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95_Query_Param_OK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95_club.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>BC95C_Custom_CSQ_Func</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, bc95_club.o(i.BC95C_Custom_CSQ_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BC95C_Custom_CSQ_Func &rArr; BC95_Query_Param_OK &rArr; BC95_Send_Data &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95_Query_Param_OK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95_club.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>BC95C_Custom_IMEI_Func</STRONG> (Thumb, 12 bytes, Stack size 20 bytes, bc95_club.o(i.BC95C_Custom_IMEI_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BC95C_Custom_IMEI_Func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95_club.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>BC95C_Custom_IP_Func</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, bc95_club.o(i.BC95C_Custom_IP_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BC95C_Custom_IP_Func &rArr; BC95_Query_Param_OK &rArr; BC95_Send_Data &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95_Query_Param_OK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95_club.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>BC95C_Custom_NSONMI_Func</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, bc95_club.o(i.BC95C_Custom_NSONMI_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BC95C_Custom_NSONMI_Func &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95_club.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>BC95C_Custom_NSORF_Func</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, bc95_club.o(i.BC95C_Custom_NSORF_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BC95C_Custom_NSORF_Func &rArr; BC95_Query_Param_OK &rArr; BC95_Send_Data &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95_Query_Param_OK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95_club.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>BC95C_Query_Point_Func</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, bc95_club.o(i.BC95C_Query_Point_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BC95C_Query_Point_Func &rArr; BC95_Send_Data &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95_Send_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc95_club.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>BC95_Query_Param_OK</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, bc95_club.o(i.BC95_Query_Param_OK))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BC95_Query_Param_OK &rArr; BC95_Send_Data &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_NSORF_Func
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_IP_Func
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_CSQ_Func
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_CSCON_Func
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_CGATT_Func
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_CFUN_Func
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_CEREG_Func
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Custom_CCLK_Func
</UL>

<P><STRONG><a name="[79]"></a>BC95_Send_Data</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, bc95_club.o(i.BC95_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BC95_Send_Data &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95_Query_Param_OK
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC95C_Query_Point_Func
</UL>

<P><STRONG><a name="[cd]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[cc]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[d0]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[cf]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
